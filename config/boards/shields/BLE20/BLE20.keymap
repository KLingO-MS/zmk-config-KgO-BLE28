/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_20keys.h"

#define _A1      0
#define _A2      1
#define _NV      2
#define _NM      3
#define _SM      4
#define _FS      5
#define _BT      6
#define _NP      7

// &sk {
//     quick-release;
// };

&sl {
    release-after-ms = <300>;
};

/ {
// ------------------------- MACROS --------------------------------
    // macros {
        // to_BASE: to_BASE {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_OFF>
        //         , <&tog _NAV>
        //         ;
        // };

        // mo_SYM: mo_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_SYM>
        //         , <&macro_press &mo _SYM>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _SYM>
        //         ;
        // };

        // to_SYM: to_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_ON>
        //         , <&rgb_ug RGB_SYM>
        //         , <&to _SYM>
        //         ;
        // };

        // to_NAV: to_NAV {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_ON>
        //         , <&rgb_ug RGB_NAV>
        //         , <&tog _NAV>
        //         ;
        // };

        // mo_NAV: mo_NAV {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_NAV>
        //         , <&macro_press &mo _NAV>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _NAV>
        //         ;
        // };

        // mo_BTF: mo_BTF {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_ON>
        //         , <&macro_tap &rgb_ug RGB_BTF>
        //         , <&macro_press &mo _BTF>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_OFF>
        //         , <&macro_release &mo _BTF>
        //         ;
        // };

        // to_BOOT: to_BOOT {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings
        //         = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
        //         , <&rgb_ug RGB_ON>
        //         , <&bootloader>
        //         ;
        // };
    // };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_BOOT {
            timeout-ms = <40>;
            key-positions = <LOT LIT LTP LBP>;
            bindings = <&bootloader>;
        };

        combo_BT_CLR {
            timeout-ms = <40>;
            key-positions = <LTP LTR>;
            bindings = <&bt BT_CLR>;
            layers = <_BT>;
        };

        combo_BT {
            timeout-ms = <50>;
            key-positions = <LOT LIT>;
            bindings = <&mo _BT>;
        };

        combo_FUN {
            timeout-ms = <50>;
            key-positions = <LIT RIT>;
            bindings = <&mo _FS>;
        };

        combo_NAV {
            timeout-ms = <50>;
            key-positions = <RBI RTM RBR>;
            bindings = <&to _NV>;
            layers = <_A1>;
        };

        combo_NUMPAD {
            timeout-ms = <50>;
            key-positions = <LBI LTM LBR>;
            bindings = <&to _NP>;
            layers = <_A1>;
        };

        combo_BASER {
            timeout-ms = <50>;
            key-positions = <RBI RTM RBR>;
            bindings = <&to _A1>;
            layers = <_NV _NP>;
        };

        combo_BASEL {
            timeout-ms = <50>;
            key-positions = <LBI LTM LBR>;
            bindings = <&to _A1>;
            layers = <_NV _NP>;
        };

// ------------------------- VOLUME COMBOS --------------------------------
        // combo_V_UP {
        //     timeout-ms = <40>;
        //     key-positions = <LTI LTM>;
        //     bindings = <&kp C_VOL_UP>;
        //     require-prior-idle-ms = <200>;
        //     layers = <_A1>;
        // };

        // combo_V_DN {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBI>;
        //     bindings = <&kp C_VOL_DN>;
        //     require-prior-idle-ms = <200>;
        //     layers = <_A1>;
        // };

        // combo_MUTE {
        //     timeout-ms = <40>;
        //     key-positions = <LOT LIT>;
        //     bindings = <&kp C_MUTE>;
        //     require-prior-idle-ms = <200>;
        //     layers = <_A1>;
        // };

        // combo_ESC {
        //     timeout-ms = <50>;
        //     key-positions = <LTP LTR>;
        //     bindings = <&kp ESC>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_BSPC {
        //     timeout-ms = <50>;
        //     key-positions = <RBI RBM RBR>;
        //     bindings = <&kp BSPC>;
        //     layers = <_A1>;
        // };



// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LTI RTI>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_A1 _A2>;
        };

        // combo_RALTL {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

        // combo_RALTR {
        //     timeout-ms = <40>;
        //     key-positions = <LMP RTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

// ------------------------- NUMPAD COMBOS --------------------------------
        combo_RET {
            timeout-ms = <50>;
            key-positions = <LBM LBI LBR>;
            bindings = <&kp KP_ENTER>;
            layers = <_NP>;
        };

        combo_NP_BSPC {
            timeout-ms = <50>;
            key-positions = <LTM LTI LTR>;
            bindings = <&kp BSPC>;
            layers = <_NP>;
        };

        combo_KPDOT {
            timeout-ms = <50>;
            key-positions = <LTP LBP>;
            bindings = <&kp KP_DOT>;
            layers = <_NP>;
        };

        combo_KPPLUS {
            timeout-ms = <50>;
            key-positions = <LTM LTI>;
            bindings = <&kp KP_PLUS>;
            layers = <_NP>;
        };

        combo_KPMINUS {
            timeout-ms = <50>;
            key-positions = <LBM LBI>;
            bindings = <&kp KP_MINUS>;
            layers = <_NP>;
        };

        combo_KPSTAR {
            timeout-ms = <50>;
            key-positions = <LTR LTM>;
            bindings = <&kp KP_MULTIPLY>;
            layers = <_NP>;
        };

        combo_KPSLASH {
            timeout-ms = <50>;
            key-positions = <LBR LBM>;
            bindings = <&kp KP_DIVIDE>;
            layers = <_NP>;
        };

// ------------------------- CHARACTER COMBOS --------------------------------
        combo_F {
            timeout-ms = <50>;
            key-positions = <RTM RTI>;
            bindings = <&kp F>;
            layers = <_A1>;
        };

        combo_K {
            timeout-ms = <50>;
            key-positions = <RBM RBI>;
            bindings = <&kp K>;
            layers = <_A1>;
        };

        combo_X {
            timeout-ms = <50>;
            key-positions = <RTM RTR>;
            bindings = <&kp X>;
            layers = <_A1>;
        };

        combo_Q {
            timeout-ms = <50>;
            key-positions = <RBI RBR>;
            bindings = <&kp Q>;
            layers = <_A1>;
        };

        combo_W {
            timeout-ms = <50>;
            key-positions = <LBR LBI>;
            bindings = <&kp W>;
            layers = <_A1>;
        };

        combo_Z {
            timeout-ms = <50>;
            key-positions = <LBR LBM>;
            bindings = <&kp Z>;
            layers = <_A1>;
        };

        combo_G {
            timeout-ms = <50>;
            key-positions = <RBM RBR>;
            bindings = <&kp G>;
            layers = <_A1>;
        };

        combo_V {
            timeout-ms = <50>;
            key-positions = <LTM LTI>;
            bindings = <&kp V>;
            layers = <_A1>;
        };

        combo_J {
            timeout-ms = <50>;
            key-positions = <LTR LTM>;
            bindings = <&kp J>;
            layers = <_A1>;
        };

        combo_M {
            timeout-ms = <50>;
            key-positions = <LBI LBM>;
            bindings = <&kp M>;
            layers = <_A1>;
        };

        // combo_COMMA {
        //     timeout-ms = <60>;
        //     key-positions = <RBM LIT>;
        //     bindings = <&kp COMMA>;
        //     layers = <_A1>;
        // };

        // combo_DOT {
        //     timeout-ms = <60>;
        //     key-positions = <RBR LIT>;
        //     bindings = <&kp DOT>;
        //     layers = <_A1>;
        // };

        // combo_QMARK {
        //     timeout-ms = <60>;
        //     key-positions = <RBP LIT>;
        //     bindings = <&kp QMARK>;
        //     layers = <_A1>;
        // };

        // combo_SEMI {
        //     timeout-ms = <60>;
        //     key-positions = <RTM LIT>;
        //     bindings = <&kp SEMI>;
        //     layers = <_A1>;
        // };

        // combo_COLON {
        //     timeout-ms = <60>;
        //     key-positions = <RTR LIT>;
        //     bindings = <&kp COLON>;
        //     layers = <_A1>;
        // };

        // combo_EXCL {
        //     timeout-ms = <60>;
        //     key-positions = <RTP LIT>;
        //     bindings = <&kp EXCL>;
        //     layers = <_A1>;
        // };

        combo_SQT {
            timeout-ms = <50>;
            key-positions = <LTR LTI>;
            bindings = <&kp SQT>;
            layers = <_A1>;
        };

        combo_DQT {
            timeout-ms = <50>;
            key-positions = <RTR RTI>;
            bindings = <&kp DQT>;
            layers = <_A1>;
        };

        combo_LPAR {
            timeout-ms = <40>;
            key-positions = <LBI LTI>;
            bindings = <&kp LPAR>;
            layers = <_A1>;
        };

        combo_RPAR {
            timeout-ms = <50>;
            key-positions = <RTI RBI>;
            bindings = <&kp RPAR>;
            layers = <_A1>;
        };

        combo_LBRC {
            timeout-ms = <50>;
            key-positions = <LBM LTM>;
            bindings = <&kp LBRC>;
            layers = <_A1>;
        };

        combo_RBRC {
            timeout-ms = <50>;
            key-positions = <RTM RBM>;
            bindings = <&kp RBRC>;
            layers = <_A1>;
        };

        combo_LBKT {
            timeout-ms = <50>;
            key-positions = <LBR LTR>;
            bindings = <&kp LBKT>;
            layers = <_A1>;
        };

        combo_RBKT {
            timeout-ms = <50>;
            key-positions = <RBR RTR>;
            bindings = <&kp RBKT>;
            layers = <_A1>;
        };

        combo_LT {
            timeout-ms = <50>;
            key-positions = <LBP LTP>;
            bindings = <&kp LT>;
            layers = <_A1>;
        };

        combo_GT {
            timeout-ms = <50>;
            key-positions = <RBP RTP>;
            bindings = <&kp GT>;
            layers = <_A1>;
        };

        // combo_PSCRN {
        //     timeout-ms = <40>;
        //     key-positions = <LBR LBI>;
        //     bindings = <&kp PSCRN>;
        //     layers = <_BASE _NAV>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_CP_M {
        //     timeout-ms = <40>;
        //     key-positions = <RTC RMC>;
        //     bindings = <&mac_cp>;
        //     layers = <_NAV>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_CP_W {
        //     timeout-ms = <40>;
        //     key-positions = <LTC LMC>;
        //     bindings = <&win_cp>;
        //     layers = <_NAV>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_PASTA_M {
        //     timeout-ms = <40>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp LG(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_PASTA_W {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LC(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_FSLH {
        //     timeout-ms = <45>;
        //     key-positions = <RMM RMR>;
        //     bindings = <&kp FSLH>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_BSLH {
        //     timeout-ms = <45>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp BSLH>;
        //     layers = <_BASE _SYM>;
        // };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        win_cp: win_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        mac_cp: mac_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <140>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <140>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

// ------------------------- MOD-MORPHS --------------------------------
        // com_sem: comma_semicolon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp COMMA>, <&kp SEMI>;
        //     mods = <(MOD_LSFT)>;
        // };

        // dot_col: dot_colon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp DOT>, <&kp COLON>;
        //     mods = <(MOD_LSFT)>;
        // };
        
    };

    keymap {
        compatible = "zmk,keymap";

                alpha_1_layer{
// -------------------------------    -------------------------------
// |  B  |  C  |  P  |  L  |                |  D  |  O  |  U  |  Y  |
// |  N  |  S  |  T  |  R  |                |  H  |  A  |  E  |  I  |
//       | _SM(BSPC) | _A2(BSPC) |    | _NM(SPC) | _NV(RET) |
                        bindings = <
   &kp B       &kp C        &kp P       &kp L             &kp D        &kp O       &kp U        &kp Y
   &hml LALT N &hml LCTRL S &hml LGUI T &hsl LSHFT R      &hsr LSHFT H &hmr LGUI A &hmr LCTRL E &hmr LALT I 
                         &bst _SM BSPC  &bst _A2 BSPC     &spt _NM SPACE  &spt _NV RET
                        >;
                };
                        //  &bst _SM BSPC  &bst _A2 BSPC     &spt _NM SPACE  &spt _NV RET


                alpha_2_layer{
// -------------------------------    -------------------------------
// |  Q  |  W  |  G  |  J  |                |  F  |  ;  |  :  |  !  |
// |  X  |  Z  |  V  |  M  |                |  K  |  ,  |  .  |  ?  |
//                   |     |     |    | SPC | RET |
                        bindings = <
   &kp Q       &kp W        &kp G       &kp J             &kp F        &kp SEMI        &kp COLON      &kp EXCL
   &hml LALT X &hml LCTRL Z &hml LGUI V &hsl LSHFT M      &hsr LSHFT K &hmr LGUI COMMA &hmr LCTRL DOT &hmr LALT QMARK
                            &none       &kp BSPC          &kp SPACE    &kp RET
                        >;
                };

                nav_layer {
// ---------------------------------    ---------------------------------
// | ESC | wCP  | mCP | PGUP |               | HOME |  UP  | END  | DEL |
// | TAB | PSCR | INS | PGDN |               | LEFT | DOWN | RGHT | RET |
//                    | APP | BSPC |    | SPC | LSFT |
                        bindings = <
   &kp ESC       &win_cp          &mac_cp       &kp PG_UP          &kp HOME        &kp UP         &kp END          &kp DEL
   &hml LALT TAB &hml LCTRL PSCRN &hml LGUI INS &hsl LSHFT PG_DN   &hsr LSHFT LEFT &hmr LGUI DOWN &hmr LCTRL RIGHT &hmr LALT RET
                                  &kp K_APP     &kp BSPC           &kp SPACE       &kp LSHFT
                        >;
                };
                
                num_layer {
// -------------------------------    -------------------------------
// |  /  |  _  |  -  |  5  |                |  6  |  =  |  +  |  *  |
// |  1  |  2  |  3  |  4  |                |  7  |  8  |  9  |  0  |
//                  | SPC | BSPC |    | SPC | BSPC |
                        bindings = <
   &kp SLASH    &kp UNDER     &kp MINUS    &kp N5             &kp N6        &kp EQUAL    &kp PLUS      &kp STAR
   &hml LALT N1 &hml LCTRL N2 &hml LGUI N3 &hsl LSHFT N4      &hsr LSHFT N7 &hmr LGUI N8 &hmr LCTRL N9 &hmr LALT N0
                              &kp KP_DOT   &kp BSPC           &kp SPACE     &kp BSPC
                        >;
                };

                sym_layer {
// -------------------------------    -------------------------------
// |  V. |  V- |  V+ |  %  |                |  ^  |  `  |  ~  |  |  |
// |  /  |  @  |  #  |  $  |                |  &  |  '  |  "  |  \  |
//                   |     |     |    | SPC | BSPC |
                        bindings = <
   &kp C_MUTE      &kp C_VOL_DN  &kp C_VOL_UP   &kp PRCNT            &kp CARET       &kp GRAVE     &kp TILDE      &kp PIPE
   &hml LALT SLASH &hml LCTRL AT &hml LGUI HASH &hsl LSHFT DLLR      &hsr LSHFT AMPS &hmr LGUI SQT &hmr LCTRL DQT &hmr LALT BSLH
                                                &none    &none       &kp SPACE     &kp BSPC
                        >;
                };

                fun_layer {
// -------------------------------    --------------------------------
// |  F5 |  F6 |  F7 |  F8 |                |  F9  | F10 | F11 | F12 |
// |  F1 |  F2 |  F3 |  F4 |                | SHFT | GUI | CTL | ALT |
//                   |     |     |    |     |      |
                        bindings = <
   &kp F5       &kp F6        &kp F7       &kp F8             &kp F9    &kp F10  &kp F11   &kp F12
   &hml LALT F1 &hml LCTRL F2 &hml LGUI F3 &hsl LSHFT F4      &kp LSHFT &kp LGUI &kp LCTRL &kp LALT
                                            &none  &none      &none  &none
                        >;
                };

                bt_layer {
// -------------------------    ---------------------
// |    CLR    | OUT | BT5 |    |    |    |    |    |
// | BT1 | BT2 | BT3 | BT4 |    |    |    |    |    |
//             |     |     |    |    |    |
                        bindings = <
   &none        &none        &out OUT_TOG &bt BT_SEL 4        &none  &none  &none  &none
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3        &none  &none  &none  &none
                                          &none  &none        &none  &none
                        >;
                };                

                num_pad {
// -------------------------    ---------------------
// |  5  |  6  |  7  |  8  |    |    |    |    |    |
// |  1  |  2  |  3  |  4  |    |    |    |    |    |
//             |  9  |  0  |    |    |    |
                        bindings = <
   &kp KP_N5 &kp KP_N6 &kp KP_N7 &kp KP_N8        &none  &none  &none  &none
   &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_N4        &none  &none  &none  &none
                       &kp KP_N9 &kp KP_N0        &none  &none
                        >;
                };                

    };
};


/delete-node/ &gd25q16;
