/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_20keys.h"

#define _A1      0
#define _A2      1
#define _NV      2
#define _NM      3
#define _SM      4
#define _FS      5
#define _BT      6

// &sk {
//     quick-release;
// };

// &sl {
//     release-after-ms = <300>;
// };

/ {
// ------------------------- MACROS --------------------------------
    // macros {
        // to_BASE: to_BASE {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_OFF>
        //         , <&tog _NAV>
        //         ;
        // };

        // mo_SYM: mo_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_SYM>
        //         , <&macro_press &mo _SYM>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _SYM>
        //         ;
        // };

        // to_SYM: to_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_ON>
        //         , <&rgb_ug RGB_SYM>
        //         , <&to _SYM>
        //         ;
        // };

        // to_NAV: to_NAV {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_ON>
        //         , <&rgb_ug RGB_NAV>
        //         , <&tog _NAV>
        //         ;
        // };

        // mo_NAV: mo_NAV {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_NAV>
        //         , <&macro_press &mo _NAV>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _NAV>
        //         ;
        // };

        // mo_BTF: mo_BTF {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_ON>
        //         , <&macro_tap &rgb_ug RGB_BTF>
        //         , <&macro_press &mo _BTF>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_OFF>
        //         , <&macro_release &mo _BTF>
        //         ;
        // };

        // to_BOOT: to_BOOT {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings
        //         = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
        //         , <&rgb_ug RGB_ON>
        //         , <&bootloader>
        //         ;
        // };
    // };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_BOOT {
            timeout-ms = <50>;
            key-positions = <LOT LIT LBP>;
            bindings = <&bootloader>;
        };

        combo_BT {
            timeout-ms = <50>;
            key-positions = <LOT LTP>;
            bindings = <&tog _BT>;
        };

        combo_FUN {
            timeout-ms = <50>;
            key-positions = <LIT RIT>;
            bindings = <&mo _FS>;
        };

        combo_NAV {
            timeout-ms = <50>;
            key-positions = <RBI RBM RBR>;
            bindings = <&to _NV>;
            layers = <_A1>;
        };

        combo_NUM {
            timeout-ms = <50>;
            key-positions = <LBI LBM LBR>;
            bindings = <&to _NM>;
            layers = <_A1>;
        };

        combo_BASER {
            timeout-ms = <50>;
            key-positions = <RBI RBM RBR>;
            bindings = <&to _A1>;
            layers = <_NV _NM>;
        };

        combo_BASEL {
            timeout-ms = <50>;
            key-positions = <LBI LBM LBR>;
            bindings = <&to _A1>;
            layers = <_NV _NM>;
        };

// ------------------------- VOLUME COMBOS --------------------------------
        combo_V_UP {
            timeout-ms = <40>;
            key-positions = <LOT LTI>;
            bindings = <&kp C_VOL_UP>;
            require-prior-idle-ms = <200>;
            // layers = <_NAV>;
        };

        combo_V_DN {
            timeout-ms = <40>;
            key-positions = <LOT LBI>;
            bindings = <&kp C_VOL_DN>;
            require-prior-idle-ms = <200>;
            // layers = <_NAV>;
        };

        combo_MUTE {
            timeout-ms = <40>;
            key-positions = <LOT LIT>;
            bindings = <&kp C_MUTE>;
            require-prior-idle-ms = <200>;
            // layers = <_NAV>;
        };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LTI RTI>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_A1 _A2>;
        };

        // combo_RALTL {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

        // combo_RALTR {
        //     timeout-ms = <40>;
        //     key-positions = <LMP RTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

// ------------------------- CHARACTER COMBOS --------------------------------
        combo_SPC {
            timeout-ms = <40>;
            key-positions = <LBM LBI>;
            bindings = <&kp SPACE>;
            layers = <_NM>;
        };

        combo_BSPC {
            timeout-ms = <40>;
            key-positions = <LTM LTI>;
            bindings = <&kp BSPC>;
            layers = <_NM>;
        };

        // combo_Z {
        //     timeout-ms = <40>;
        //     key-positions = <LTR LBR>;
        //     bindings = <&kp Z>;
        //     layers = <_A1>;
        // };

        // combo_V {
        //     timeout-ms = <40>;
        //     key-positions = <LTM LBM>;
        //     bindings = <&kp V>;
        //     layers = <_A1>;
        // };

        // combo_M {
        //     timeout-ms = <40>;
        //     key-positions = <LTI LBI>;
        //     bindings = <&kp M>;
        //     layers = <_A1>;
        // };

        // combo_J {
        //     timeout-ms = <40>;
        //     key-positions = <LTR LTM>;
        //     bindings = <&kp J>;
        //     layers = <_A1>;
        // };

        // combo_W {
        //     timeout-ms = <40>;
        //     key-positions = <LTM LTI>;
        //     bindings = <&kp W>;
        //     layers = <_A1>;
        // };

        // combo_K {
        //     timeout-ms = <40>;
        //     key-positions = <RBI RTI>;
        //     bindings = <&kp K>;
        //     layers = <_A1>;
        // };

        // combo_G {
        //     timeout-ms = <40>;
        //     key-positions = <RBM RTM>;
        //     bindings = <&kp G>;
        //     layers = <_A1>;
        // };

        // combo_X {
        //     timeout-ms = <40>;
        //     key-positions = <RTR RBR>;
        //     bindings = <&kp X>;
        //     layers = <_A1>;
        // };

        // combo_F {
        //     timeout-ms = <40>;
        //     key-positions = <RTI RTM>;
        //     bindings = <&kp F>;
        //     layers = <_A1>;
        // };

        // combo_Q {
        //     timeout-ms = <40>;
        //     key-positions = <RTM RTR>;
        //     bindings = <&kp Q>;
        //     layers = <_A1>;
        // };

        // combo_LPAR {
        //     timeout-ms = <40>;
        //     key-positions = <LMM LMI>;
        //     bindings = <&kp LPAR>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RPAR {
        //     timeout-ms = <40>;
        //     key-positions = <RMI RMM>;
        //     bindings = <&kp RPAR>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LBRC {
        //     timeout-ms = <40>;
        //     key-positions = <LTM LTI>;
        //     bindings = <&kp LBRC>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RBRC {
        //     timeout-ms = <40>;
        //     key-positions = <RTI RTM>;
        //     bindings = <&kp RBRC>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LBKT {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBI>;
        //     bindings = <&kp LBKT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RBKT {
        //     timeout-ms = <40>;
        //     key-positions = <RBI RBM>;
        //     bindings = <&kp RBKT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_PSCRN {
        //     timeout-ms = <40>;
        //     key-positions = <LBR LBI>;
        //     bindings = <&kp PSCRN>;
        //     layers = <_BASE _NAV>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_CP_M {
        //     timeout-ms = <40>;
        //     key-positions = <RTC RMC>;
        //     bindings = <&mac_cp>;
        //     layers = <_NAV>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_CP_W {
        //     timeout-ms = <40>;
        //     key-positions = <LTC LMC>;
        //     bindings = <&win_cp>;
        //     layers = <_NAV>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_PASTA_M {
        //     timeout-ms = <40>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp LG(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_PASTA_W {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LC(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_GT {
        //     timeout-ms = <45>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp GT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LT {
        //     timeout-ms = <45>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_FSLH {
        //     timeout-ms = <45>;
        //     key-positions = <RMM RMR>;
        //     bindings = <&kp FSLH>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_BSLH {
        //     timeout-ms = <45>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp BSLH>;
        //     layers = <_BASE _SYM>;
        // };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        win_cp: win_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        mac_cp: mac_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

// ------------------------- MOD-MORPHS --------------------------------
        // com_sem: comma_semicolon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp COMMA>, <&kp SEMI>;
        //     mods = <(MOD_LSFT)>;
        // };

        // dot_col: dot_colon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp DOT>, <&kp COLON>;
        //     mods = <(MOD_LSFT)>;
        // };
        
    };

    keymap {
        compatible = "zmk,keymap";

                alpha_1_layer{
// -------------------------------    -------------------------------
// |  B  |  C  |  L  |  D  |                |  P  |  O  |  U  |  Y  |
// |  N  |  S  |  R  |  T  |                |  H  |  A  |  E  |  I  |
//             | TAB | _A2(BSPC) |    | _NV(SPC) | RET |
                        bindings = <
   &kp B       &kp C        &kp L       &kp D             &kp P        &kp O       &kp U        &kp Y
   &hml LALT N &hml LCTRL S &hml LGUI R &hsl LSHFT T      &hsr LSHFT H &hmr LGUI A &hmr LCTRL E &hmr LALT I 
                          &bst _SM TAB  &bst _A2 BSPC     &spt _NV SPACE  &spt _NM RET
                        >;
                };

                alpha_2_layer{
// -------------------------------    -------------------------------
// |  !  |  X  |  J  |  W  |                |  F  |  Q  |  '  |  "  |
// |  ?  |  Z  |  V  |  M  |                |  K  |  G  |  ,  |  .  |
//                   |     |     |    | SPC | RET |
                        bindings = <
   &kp EXCL        &kp X        &kp J       &kp W             &kp F        &kp Q       &kp SQT          &kp DQT
   &hml LALT QMARK &hml LCTRL Z &hml LGUI V &hsl LSHFT M      &hsr LSHFT K &hmr LGUI G &hmr LCTRL COMMA &hmr LALT DOT
                               &none       &none             &kp SPACE    &kp RET
                        >;
                };

                nav_layer {
// -------------------------------    ----------------------------------
// | ESC | wCP | mCP | PGUP |               | HOME |  UP  | END  | DEL |
// | TAB | PRN | INS | PGDN |               | LEFT | DOWN | RGHT | RET |
//                  | APP | BSPC |    | SPC | LSFT |
                        bindings = <
   &kp ESC       &win_cp          &mac_cp       &kp PG_UP            &kp HOME        &kp UP         &kp END          &kp DEL
   &hml LALT TAB &hml LCTRL PSCRN &hml LGUI INS &hsl LSHFT PG_DN     &hsr LSHFT LEFT &hmr LGUI DOWN &hmr LCTRL RIGHT &hmr LALT RET
                                  &kp K_APP     &kp BSPC             &kp SPACE       &kp LSHFT
                        >;
                };
                
                num_layer {
// -------------------------------    -------------------------------
// |  9  |  4  |  5  |  6  |                |  =  |  +  |  *  |  |  |
// |  0  |  1  |  2  |  3  |                |  _  |  -  |  /  |  \  |
//                   |  7  |  8  |    | SPC | BSPC |
                        bindings = <
   &kp N9       &kp N4        &kp N5       &kp N6             &kp EQUAL        &kp PLUS        &kp STAR         &kp PIPE
   &hml LALT N0 &hml LCTRL N1 &hml LGUI N2 &hsl LSHFT N3      &hsr LSHFT UNDER &hmr LGUI MINUS &hmr LCTRL SLASH &hmr LALT BSLH
                                   &kp N7  &kp N8             &kp SPACE        &kp BSPC
                        >;
                };

                sym_layer {
// -------------------------------    -------------------------------
// |  %  |  ^  |  <  |  {  |                |  }  |  >  |  $  |  &  |
// |  @  |  #  |  (  |  [  |                |  ]  |  )  |  ;  |  :  |
//                   |     |     |    |  `  |  ~  |
                        bindings = <
   &kp PRCNT    &kp CARET       &kp LT         &kp LBRC              &kp RBRC        &kp GT         &kp DLLR        &kp AMPS
   &hml LALT AT &hml LCTRL HASH &hml LGUI LPAR &hsl LSHFT LBKT       &hsr LSHFT RBKT &hmr LGUI RPAR &hmr LCTRL SEMI &hmr LALT COLON
                                               &none    &none        &kp GRAVE &kp TILDE
                        >;
                };

                fun_layer {
// -------------------------------    -------------------------------
// |  F5 |  F6 |  F7 |  F8 |                | F11 | F12 |     |     |
// |  F1 |  F2 |  F3 |  F4 |                |  F9 | F10 |     |     |
//                   |     |     |    |     |     |
                        bindings = <
   &kp F5       &kp F6        &kp F7       &kp F8             &kp F11       &kp F12       &none     &none
   &hml LALT F1 &hml LCTRL F2 &hml LGUI F3 &hsl LSHFT F4      &hsr LSHFT F9 &hmr LGUI F10 &kp LCTRL &kp LALT
                                            &none  &none      &none  &none
                        >;
                };

                bt_layer {
// -------------------------    ---------------------
// |     |     | OUT | BT5 |    |    |    |    |    |
// | BT1 | BT2 | BT3 | BT4 |    |    |    |    |    |
//             | _A1 | CLR |    |    |    |
                        bindings = <
   &none        &none        &out OUT_TOG &bt BT_SEL 4             &none  &none  &none  &none
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3             &none  &none  &none  &none
                                          &tog _BT  &bt BT_CLR     &none  &none
                        >;
                };                
    };
};
