/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_28keys.h"

#define _BASE    0
#define _NAV     1
#define _SYM     2
#define _BTF     3

// &sk {
//     quick-release;
// };

// &sl {
//     release-after-ms = <300>;
// };

/ {
// ------------------------- MACROS --------------------------------
    // macros {
    //     to_BASE: to_BASE {
    //         label = "ZM_to_BASE";
    //         compatible = "zmk,behavior-macro";
    //         #binding-cells = <0>;
    //         wait-ms = <0>;
    //         tap-ms = <0>;
    //         bindings
    //             = <&rgb_ug RGB_OFF>
    //             , <&tog _NAV>
    //             ;
    //     };

    //     // mo_SYM: mo_SYM {
    //     //     label = "ZM_mo_SYM";
    //     //     compatible = "zmk,behavior-macro";
    //     //     #binding-cells = <0>;
    //     //     wait-ms = <0>;
    //     //     tap-ms = <0>;
    //     //     bindings
    //     //         = <&macro_tap &rgb_ug RGB_SYM>
    //     //         , <&macro_press &mo _SYM>
    //     //         , <&macro_pause_for_release>
    //     //         , <&macro_tap &rgb_ug RGB_BASE>
    //     //         , <&macro_release &mo _SYM>
    //     //         ;
    //     // };

    //     // to_SYM: to_SYM {
    //     //     label = "ZM_to_SYM";
    //     //     compatible = "zmk,behavior-macro";
    //     //     #binding-cells = <0>;
    //     //     wait-ms = <0>;
    //     //     tap-ms = <0>;
    //     //     bindings
    //     //         = <&rgb_ug RGB_ON>
    //     //         , <&rgb_ug RGB_SYM>
    //     //         , <&to _SYM>
    //     //         ;
    //     // };

    //     to_NAV: to_NAV {
    //         label = "ZM_to_NAV";
    //         compatible = "zmk,behavior-macro";
    //         #binding-cells = <0>;
    //         wait-ms = <0>;
    //         tap-ms = <0>;
    //         bindings
    //             = <&rgb_ug RGB_ON>
    //             , <&rgb_ug RGB_NAV>
    //             , <&tog _NAV>
    //             ;
    //     };

    //     // mo_NAV: mo_NAV {
    //     //     label = "ZM_mo_NAV";
    //     //     compatible = "zmk,behavior-macro";
    //     //     #binding-cells = <0>;
    //     //     wait-ms = <0>;
    //     //     tap-ms = <0>;
    //     //     bindings
    //     //         = <&macro_tap &rgb_ug RGB_NAV>
    //     //         , <&macro_press &mo _NAV>
    //     //         , <&macro_pause_for_release>
    //     //         , <&macro_tap &rgb_ug RGB_BASE>
    //     //         , <&macro_release &mo _NAV>
    //     //         ;
    //     // };

    //     mo_BTF: mo_BTF {
    //         label = "ZM_mo_BTF";
    //         compatible = "zmk,behavior-macro";
    //         #binding-cells = <0>;
    //         wait-ms = <0>;
    //         tap-ms = <0>;
    //         bindings
    //             = <&macro_tap &rgb_ug RGB_ON>
    //             , <&macro_tap &rgb_ug RGB_BTF>
    //             , <&macro_press &mo _BTF>
    //             , <&macro_pause_for_release>
    //             , <&macro_tap &rgb_ug RGB_OFF>
    //             , <&macro_release &mo _BTF>
    //             ;
    //     };

    //     to_BOOT: to_BOOT {
    //         label = "ZM_to_BOOT";
    //         compatible = "zmk,behavior-macro";
    //         #binding-cells = <0>;
    //         bindings
    //             = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
    //             , <&rgb_ug RGB_ON>
    //             , <&bootloader>
    //             ;
    //     };
    // };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_BOOT {
            timeout-ms = <50>;
            key-positions = <LMC RMC>;
            bindings = <&bootloader>;
            layers = <_BTF>;
        };

        combo_BTF {
            timeout-ms = <50>;
            key-positions = <LTB RTB>;
            bindings = <&mo _BTF>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_NAVR {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to _NAV>;
            layers = <_BASE _SYM>;
        };

        combo_NAVL {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to _NAV>;
            layers = <_BASE _SYM>;
        };

        combo_BASER {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to _BASE>;
            layers = <_NAV>;
        };

        combo_BASEL {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to _BASE>;
            layers = <_NAV>;
        };

// ------------------------- VOLUME COMBOS --------------------------------
        combo_V_UP {
            timeout-ms = <40>;
            key-positions = <RTI RTM>;
            bindings = <&kp C_VOL_UP>;
            require-prior-idle-ms = <200>;
            layers = <_NAV>;
        };

        combo_V_DN {
            timeout-ms = <40>;
            key-positions = <RBI RBM>;
            bindings = <&kp C_VOL_DN>;
            require-prior-idle-ms = <200>;
            layers = <_NAV>;
        };

        combo_MUTE {
            timeout-ms = <40>;
            key-positions = <RMI RMM>;
            bindings = <&kp C_MUTE>;
            require-prior-idle-ms = <200>;
            layers = <_NAV>;
        };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LTI RTI>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_BASE>;
        };

        // combo_RALTL {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

        // combo_RALTR {
        //     timeout-ms = <40>;
        //     key-positions = <LMP RTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

// ------------------------- CHARACTER COMBOS --------------------------------
        combo_LPAR {
            timeout-ms = <40>;
            key-positions = <LMM LMI>;
            bindings = <&kp LPAR>;
            layers = <_BASE _SYM>;
        };

        combo_RPAR {
            timeout-ms = <40>;
            key-positions = <RMI RMM>;
            bindings = <&kp RPAR>;
            layers = <_BASE _SYM>;
        };

        combo_LBRC {
            timeout-ms = <40>;
            key-positions = <LTM LTI>;
            bindings = <&kp LBRC>;
            layers = <_BASE _SYM>;
        };

        combo_RBRC {
            timeout-ms = <40>;
            key-positions = <RTI RTM>;
            bindings = <&kp RBRC>;
            layers = <_BASE _SYM>;
        };

        combo_LBKT {
            timeout-ms = <40>;
            key-positions = <LBM LBI>;
            bindings = <&kp LBKT>;
            layers = <_BASE _SYM>;
        };

        combo_RBKT {
            timeout-ms = <40>;
            key-positions = <RBI RBM>;
            bindings = <&kp RBKT>;
            layers = <_BASE _SYM>;
        };

        combo_PSCRN {
            timeout-ms = <40>;
            key-positions = <LBR LBI>;
            bindings = <&kp PSCRN>;
            layers = <_BASE _NAV>;
            require-prior-idle-ms = <200>;
        };

        combo_CP_M {
            timeout-ms = <40>;
            key-positions = <RTC RMC>;
            bindings = <&mac_cp>;
            layers = <_NAV>;
            require-prior-idle-ms = <200>;
        };

        combo_CP_W {
            timeout-ms = <40>;
            key-positions = <LTC LMC>;
            bindings = <&win_cp>;
            layers = <_NAV>;
            require-prior-idle-ms = <200>;
        };

        // combo_PASTA_M {
        //     timeout-ms = <40>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp LG(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_PASTA_W {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LC(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_GT {
        //     timeout-ms = <45>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp GT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LT {
        //     timeout-ms = <45>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_FSLH {
        //     timeout-ms = <45>;
        //     key-positions = <RMM RMR>;
        //     bindings = <&kp FSLH>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_BSLH {
        //     timeout-ms = <45>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp BSLH>;
        //     layers = <_BASE _SYM>;
        // };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        win_cp: win_cp {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_COPY_PASTA";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        mac_cp: mac_cp {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_COPY_PASTA";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_SHIFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_SHIFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BSPC_TAP_SYM_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SPC_TAP_NAV_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

// ------------------------- MOD-MORPHS --------------------------------
        // com_sem: comma_semicolon {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "COMMA_SEMI";
        //     #binding-cells = <0>;
        //     bindings = <&kp COMMA>, <&kp SEMI>;
        //     mods = <(MOD_LSFT)>;
        // };

        // dot_col: dot_colon {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "DOT_COLON";
        //     #binding-cells = <0>;
        //     bindings = <&kp DOT>, <&kp COLON>;
        //     mods = <(MOD_LSFT)>;
        // };
        
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// -------------------------------    -------------------------------
// |  Z  |  C  |  L  |  D  |  B  |    |  F  |  M  |  O  |  U  |  Y  |
// |  R  |  S  |  N  |  T  |  G  |    |  J  |  H  |  A  |  E  |  I  |
//       |  W  |  V  |  M  |                |  K  |  X  |  Q  |
//                  | _SYM(BSPC) |    | _NAV(SPC) |
                        bindings = <
   &kp Z       &kp C        &kp L       &kp D        &kp B    &kp F  &kp M        &kp O       &kp U        &kp Y
   &hml LALT R &hml LCTRL S &hml LGUI N &hsl LSHFT T &kp G    &kp J  &hsr LSHFT H &hmr LGUI A &hmr LCTRL E &hmr LALT I 
               &kp W        &kp V       &kp M                        &kp K        &kp X       &kp Q
                                            &bst _SYM BSPC    &spt _NAV SPACE
                        >;
                };

                nav_layer {
// --------------------------------    -----------------------------------
// | . , |  7  |  8  |  9  | ESC  |    | PGUP | HOME |  UP  | END  | INS |
// |  0  |  4  |  5  |  6  | TAB  |    | PGDN | LEFT | SPC  | RGHT | RET |
//       |  1  |  2  |  3  |                  | DEL  | DOWN | APP  |
//                         | BSPC |    | SHFT |
                        bindings = <
   &kp KP_DOT   &kp N7        &kp N8       &kp N9        &kp ESC    &kp PG_UP &kp HOME        &kp UP          &kp END          &kp INS
   &hml LALT N0 &hml LCTRL N4 &hml LGUI N5 &hsl LSHFT N6 &kp TAB    &kp PG_DN &hsr LSHFT LEFT &hmr LGUI SPACE &hmr LCTRL RIGHT &hmr LALT RET
                &kp N1        &kp N2       &kp N3                             &kp DEL         &kp DOWN        &kp K_APP
                                                  &bst _SYM BSPC    &kp LSHFT
                        >;
                };
                
                sym_layer {
// -------------------------------    -------------------------------
// |  @  |  #  |  $  |  %  |  `  |    |  ~  |  '  |  "  |  &  |  |  |
// |  /  |  *  |  -  |  +  |  <  |    |  >  |  ,  |  .  |  ?  |  \  |
//       |  ^  |  _  |  =  |                |  ;  |  :  |  !  |
//                        | BSPC |    | SPC |
                        bindings = <
   &kp AT          &kp HASH        &kp DLLR        &kp PRCNT       &kp GRAVE    &kp TILDE  &kp SQT          &kp DQT       &kp AMPS         &kp PIPE
   &hml LALT SLASH &hml LCTRL STAR &hml LGUI MINUS &hsl LSHFT PLUS &kp LT       &kp GT     &hsr LSHFT COMMA &hmr LGUI DOT &hmr LCTRL QMARK &hmr LALT BSLH
                   &kp CARET       &kp UNDER       &kp EQUAL                               &kp SEMI         &kp COLON     &kp EXCL
                                                                   &kp BSPC     &spt _NAV SPACE
                        >;
                };

                btf_layer {
// ----------------------------    ----------------------------------
// | F11 | F7 | F8 | F9 | F12 |    | BT1 | BT2  | BT3 |  BT4  | BT5 |
// | F10 | F4 | F5 | F6 | RST |    | RST | SHFT | GUI | CTRL  | ALT |
//       | F1 | F2 | F3 |                | USB  |     | BTCLR |
//                      |     |    |     |
                        bindings = <
   &kp F11 &kp F7 &kp F8 &kp F9 &kp F12       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
   &kp F10 &kp F4 &kp F5 &kp F6 &sys_reset    &sys_reset   &kp LSHFT    &kp LGUI     &kp LCTRL    &kp LALT
           &kp F1 &kp F2 &kp F3                            &out OUT_TOG &none        &bt BT_CLR
                                &none         &none
                        >;
                };                
    };
};
